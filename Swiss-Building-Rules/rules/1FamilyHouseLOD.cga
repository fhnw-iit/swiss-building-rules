import SULO : 	"6SetUpLOD.cga"

attr familyHouseBuildingHeight			= rint(rand(1, 3))*FHFloorHeight
attr FHFloorHeight						= rand(2.2, 3)
attr OldHouseGable2						= rand(35,45)
attr tolerance = 3
attr FamilyHouseGable1						= rand(35,55)
attr FamilyHouseGable2						= rand(15,35)
attr FamilyHouseTile1						= rand(2,3)
attr FamilyHouseTile2						= rand(3,5)
attr FamilyHouseTile3						= rand(2.5,6)
attr FHTile_drain							=0.5

const cleanupFactor							= 0.01

/*
GartenHag --> 		resetGeometry() setback(SULO.setbackdistances4FamHouse)
					{all: NIL | remainder: setback(SULO.setbackdistances4FamHouse)
					{all: extrude(1.2) FHHag | remainder: NIL}}

FHHag --> 			    //rotateUV(0, 90)
					    normalizeUV(0, u, collectiveAllFaces)
					    insertAlongUV(0, SULO.HaagEdel , SULO.length)

*/

GartenHag --> NIL
FamilyHouseStart --> 		/**color(1,0,0)*/ FamilyHouseStart0//red
FamilyHouseStart0 -->		case scope.sx*1.5 < scope.sz || scope.sz*1.5 < scope.sx : FamilyHouseStart2
							case geometry.area >= 200: FamilyHouseStart1
							else : FamilyHouseStart2

FamilyHouseStart1 -->					innerRectangle(edge) {shape: setback(SULO.setbackdistances) {all: GartenHag | remainder: scatter(surface, 1, gaussian, center, 0.4){ primitiveQuad((rand(7,14)),(rand(8,15))) FamilyHouseLot1(scope.sx,scope.sz)}} | remainder: NIL}
FamilyHouseStart2 -->					innerRectangle(edge) {shape : setback(SULO.setbackdistances) {all: GartenHag | remainder: alignScopeToGeometry(yUp,largest, longest) splitArea(x){ '1/(rint(rand(1,scope.sx/15))) : FamilyHouseStart3 }*} | remainder: NIL}
FamilyHouseStart3 -->					scatter(surface, 1, gaussian, center, rand(0, 0.5)){ primitiveQuad((rand(5,11)),(rand(5,13))) alignScopeToGeometry(yUp, 6,6) FamilyHouseLot1(scope.sx,scope.sz)} 
FamilyHouseLot1(scpX,scpZ) -->			extrude(familyHouseBuildingHeight) comp(f){top: FamilyHouseRoof | front: FamilyHouseSide(1,scpX,scpZ) | left: FamilyHouseSide(2,scpX,scpZ) | right: FamilyHouseSide(3,scpX,scpZ) |back: FamilyHouseSide(4,scpX,scpZ)}		

//Roofs
FamilyHouseRoof -->			40%: FamilyHouseRoofus1 label("roffy1")
							else: FamilyHouseRoofus2 label("roffy2")

FamilyHouseRoofus1 --> 	 	    alignScopeToGeometry(yUp, largest, 0)
							roofGable(FamilyHouseGable1, 1 /**0.75*/, 0) split(y) {~2 : FamilyHouseRoof2 | ~2: NIL }
FamilyHouseRoof2 -->			comp(f) {aslant = FamilyHouseRoof3 | horizontal = HozoFamilyHouseRoof3 | vertical : FamilyHouseSide1(5,scope.sx,scope.sy)}
HozoFamilyHouseRoof3 -->		comp(f){world.up : FamilyHouseRoof3}
FamilyHouseRoof3 -->			Roofunderside extrude(world.up, 0.3)	comp(f){ vertical: RoofSide | aslant: FamilyHouseRoof5 | horizontal: FamilyHouseRoof4}
FamilyHouseRoof4 -->			comp(f){world.up : roofHip(FamilyHouseGable2) FamilyHouseRoof5}
FamilyHouseRoof5 -->			color(SULO.rot) SULO.ZiegelRoof
RoofSide -->					color(SULO.brown) SULO.RoofSide

Roofunderside --> color(SULO.brown) SULO.RoofUnderSide

FamilyHouseRoofus2 -->		 roofGable(26,0.9)
							comp(f){top = H60Top | side: FamilyHouseSide1(5,scope.sx,scope.sy)}
H60Top -->			extrude(vertex.normal, 0.3) comp(f){object.top: H60Top1 | 3: H60Verti | 4: H60Verti | 7: H60Verti | 8: H60Verti | 9: H60Verti | 12: H60Verti | 5: H60Top2 | 10: H60Top2 }
H60Top1 -->			SULO.ZiegelRoof
H60Verti -->		color(SULO.brown) SULO.RoofSide
H60Top2 -->			color(SULO.brown) SULO.RoofUnderSide	

//Facade

const walsy = 	70%: "1" 
				else: "2"
FHWall -->	case walsy == "1" : color(SULO.AllWColors)SULO.DryWall1
			else: color(SULO.AllWColors)SULO.DryWall2
				

FamilyHouseSide(inx, scpX, scpZ) -->		split(y){rand(0,0.5) : FHFloor(inx, 0.1, split.total, scpX, scpZ)| ~1: FamilyHouseSide1(inx,scpX,scpZ)}
FamilyHouseSide1(inx, scpX, scpZ) -->
											case inx == 5 || inx == 6: split(y){~FHFloorHeight: FHFloor(inx, 100, split.total, scpX, scpZ)}*
											else: split(y){~FHFloorHeight: FHFloor(inx, split.index, split.total, scpX, scpZ)}*
							
FHFloor(inx, flr, flrT, scpX,scpZ)-->
				case inx ==5: innerRectangle(scope){ shape : FamilyHouseSide1(6, scope.sx, scope.sz) | remainder : FHWall }
				
				case inx ==1 && flr ==0: 
					case scpX < scpZ :
								case comp.sel == "front" || inx == 5: split(x){{FamilyHouseTile1: FHTile1(inx, flr, flrT)}*|FamilyHouseTile1: FHDoor1(inx, flr, flrT)|{~FamilyHouseTile1: FHTile1(inx, flr, flrT)}*}
								case comp.sel == "right" || comp.sel == "left":split(x){{FHTile_drain : FHDrain(inx, flr, flrT)}|{~FamilyHouseTile1: FHTile1(inx, flr, flrT) | ~FamilyHouseTile2: FHTile1(inx, flr, flrT) | ~FamilyHouseTile3: FHTile1(inx, flr, flrT)}*}
								else: split(x){~FamilyHouseTile3: FHTile1(inx, flr, flrT)}*
					else: 
								case comp.sel == "right" || inx == 5: split(x){~FamilyHouseTile1: FHTile1(inx, flr, flrT)}*
								case comp.sel == "front" || inx == 5: split(x){{FHTile_drain : FHDrain(inx, flr, flrT)}|{FamilyHouseTile1: FHTile1(inx, flr, flrT)}*|FamilyHouseTile1: FHDoor1(inx, flr, flrT)|{~FamilyHouseTile1: FHTile1(inx, flr, flrT)}*}
								case comp.sel == "back" :split(x){{FHTile_drain : FHDrain(inx, flr, flrT)}|{~FamilyHouseTile1: FHTile1(inx, flr, flrT) | ~FamilyHouseTile2: FHTile1(inx, flr, flrT) | ~FamilyHouseTile3: FHTile1(inx, flr, flrT)}*}
								else: split(x){~FamilyHouseTile3: FHTile1(inx, flr, flrT)}*
				
				
				
				else:
					
					case scpX < scpZ :
								case comp.sel == "front" || inx == 5: split(x){~FamilyHouseTile1: FHTile1(inx, flr, flrT)}*
								case comp.sel == "right" || comp.sel == "left":split(x){{FHTile_drain : FHDrain(inx, flr, flrT)}|{~FamilyHouseTile1: FHTile1(inx, flr, flrT) | ~FamilyHouseTile2: FHTile1(inx, flr, flrT) | ~FamilyHouseTile3: FHTile1(inx, flr, flrT)}*}
								else: split(x){~FamilyHouseTile3: FHTile1(inx, flr, flrT)}*
					else: 
								case comp.sel == "right" || inx == 5: split(x){~FamilyHouseTile1: FHTile1(inx, flr, flrT)}*
								case comp.sel == "front" || comp.sel == "back" :split(x){{FHTile_drain : FHDrain(inx, flr, flrT)}|{~FamilyHouseTile1: FHTile1(inx, flr, flrT) | ~FamilyHouseTile2: FHTile1(inx, flr, flrT) | ~FamilyHouseTile3: FHTile1(inx, flr, flrT)}*}
								else: split(x){~FamilyHouseTile3: FHTile1(inx, flr, flrT)}*
								
FHDrain(inx, flr, flrT)-->

			FHWall

/**	case contextCount(intra, "roffy2") >=1 :
	
			case (flr == flrT-1) : i(SULO.drain_top) s(0.5,'1.02,1.1)
			case (flr == 0) : i(SULO.drain_bottom) s(0.5,'1,0.2475)
			else: i(SULO.drain_middle) s(0.5,'1,0.2475)		
			
	case contextCount(intra, "roffy1") >=1:	*/
	

FHTile1(inx, flr, flrT) -->
case scope.sx < 0.5 : FHWall
case scope.sx < 2.3 :  FHWindowSmall(inx, flr, flrT)
case scope.sx < 3.6 :  FHWindowDoppel(inx, flr, flrT)
else : 	
			70% : FHWindowTrippel(inx, flr, flrT)
			else: case flr==100: 30% :FHWindowTrippel(inx, flr, flrT)
								else: FHWall
				else: FHBalcony(inx, flr, flrT)

const storensy = 25%: 2
				else: 3
				

FHWindowSmall(inx, flr, flrT) --> 							case scope.sy < 1 : FHWall
															else:

													split(x)	{ ~0.5 : FHWall
																| ~1 : split(y) { 0.7 : FHWall | 1.5: FHWS SULO.StorenTile(storensy, scope.sx,scope.sy, SULO.AllWColors)| ~0.3 : FHWall}
																| ~0.5 : FHWall }
FHWS --> i(SULO.Fenster1) t(0,0,-0.02) SULO.Vorhang(4)

FHWindowDoppel(inx, flr, flrT) --> 							case scope.sy < 1 : FHWall
															else:

													split(x)	{ ~0.5 : FHWall
																| ~1.3 : split(y) { 0.7 : FHWall | 1.5: FHWD SULO.StorenTile(storensy, scope.sx,scope.sy, SULO.AllWColors) | ~0.3 : FHWall}
																| ~0.5 : FHWall }
FHWD --> i(SULO.Fenster2)t(0,0,-0.02) SULO.Vorhang(5)


FHBalcony(inx, flr, flrT) --> 		case scope.sy < 1 : FHWall
									else:
									FHBDoor
									FHBRails(flr)

FHBDoor --> 				split(x){ {~0.5 : FHWall}
									| ~0.8 : split(y){ 0.2 : FHWall | 2 : FHBDor SULO.StorenTile(storensy, scope.sx,scope.sy, SULO.AllWColors)| ~1 : FHWall}
									| {~0.5 : FHWall} }
FHBDor -->					s('1,'1,'1) i(SULO.Fenster2Tuere)t(0,0,-0.02)SULO.Vorhang(2)
FHBRails(flr) --> 			NIL
														
										
										
FHWindowTrippel(inx, flr, flrT) --> 		split(x)	{ ~0.5 : FHWall
														| ~1 : split(y) { 0.7 : FHWall | 1.5: FHWT SULO.StorenTile(storensy, scope.sx,scope.sy, SULO.AllWColors)| ~0.3 : FHWall}
														| ~0.5 : FHWall }			
FHWT --> 		case scope.sy < 1 : i(SULO.Fenster3)t(0,0,-0.02)SULO.Vorhang(6)
				else: i(SULO.Fenster3) t(0,0,-0.02)SULO.Vorhang(6)

FHDoor1(inx, flr, flrT) --> FHDoor1
							FHStairs
FHDoor1 -->			split(x)	{ ~0.5 : FHWall
								| ~1 : split(y) { ~0 : FHWall | ~2: FHDoor2 | ~0.3 : FHWall}
								| ~0.5 : FHWall }
FHDoor2 --> FHWall 
FHStairs -->		FHWall